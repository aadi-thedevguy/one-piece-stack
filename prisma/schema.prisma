// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roleIDs     String[]     @db.ObjectId
  roles       Role[]       @relation(fields: [roleIDs], references: [id])
  sessions    Session[]
  connections Connection[]
  roleId      String?      @db.ObjectId
}

model Note {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId   String   @db.ObjectId

  @@index([ownerId])
  @@index([ownerId, updatedAt])
}

model UserImage {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId
}

model Password {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId
}

model Session {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId

  @@index([userId])
}

model Permission {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  action      String
  entity      String
  access      String
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleIDs   String[] @db.ObjectId
  roles     Role[]   @relation(fields: [roleIDs], references: [id])

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String @unique
  description String @default("")

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userIDs       String[]     @db.ObjectId
  permissionIDs String[]     @db.ObjectId
  users         User[]       @relation(fields: [userIDs], references: [id])
  permissions   Permission[] @relation(fields: [permissionIDs], references: [id])
}

model Verification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  type      String
  target    String
  secret    String
  algorithm String
  digits    Int
  period    Int
  charSet   String
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId

  @@unique([providerName, providerId])
}
